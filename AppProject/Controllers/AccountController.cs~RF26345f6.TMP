using AppProject.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;

namespace AppProject.Controllers
{
    public class AccountController : Controller
    {

        PostCommentsContext db = new PostCommentsContext();

        // GET: AccountTest
        public ActionResult Index()
        {
            if (Session["UserID"] != null)
            {
                return RedirectToAction("Menu");
            }
            else
            {
                return View();
            }
        }

        [HttpPost]
        public ActionResult Index(UserAccount AccountP)
        {

                using (UserAccountDbContext dbn = new UserAccountDbContext())
                {
                    var usr = dbn.UserAccounts.Where(u => u.Username == AccountP.Username && u.Password == AccountP.Password).FirstOrDefault();
                    if (AccountP != null)
                    {
                        Session["UserID"] = AccountP.UserID.ToString();
                        Session["Username"] = AccountP.Username.ToString();
                        return RedirectToAction("Menu"); //REMEMERTHIS
                    }
                    else
                    {
                        ModelState.AddModelError("", "Username or password is invalid");
                    }
                }
            return View();
        }

        public ActionResult Comment(int? id)
        {
            if (Session["UserID"] != null)
            {
                return RedirectToAction("Menu");
            }
            else
            {
                return View();
            }
        }

        [HttpPost]
        public ActionResult Index(UserAccount AccountP)
        {

            using (UserAccountDbContext dbn = new UserAccountDbContext())
            {
                var usr = dbn.UserAccounts.Where(u => u.Username == AccountP.Username && u.Password == AccountP.Password).FirstOrDefault();
                if (AccountP != null)
                {
                    Session["UserID"] = AccountP.UserID.ToString();
                    Session["Username"] = AccountP.Username.ToString();
                    return RedirectToAction("Menu"); //REMEMERTHIS
                }
                else
                {
                    ModelState.AddModelError("", "Username or password is invalid");
                }
            }
            return View();
        }

        public ActionResult Logout()
        {
            if (Session["UserID"] != null)
            {
                do
                {
                    Session.Remove("UserID");    // removes the key
                    Session.Remove("Username");
                } while (Session["UserID"] != null);// tests that the remove worked
            }
            return RedirectToAction("Index");
        }



        public ActionResult Menu()
        {
            if (Session["UserID"] != null)
            {
                return View(db.Posts.ToList());
            }
            else
            {
                return RedirectToAction("Index");
            }
        }

        /*public ActionResult Register() //FOR REGISTRATION (NEW AUTHENTICATION USER) REMOVE THE COOMMENTS
        {
            return View();
        }

        [HttpPost]
        public ActionResult Register(UserAccount AccountP)
        {
            if (ModelState.IsValid)
            {
                using (UserAccountDbContext dbn = new UserAccountDbContext())
                {
                    dbn.UserAccounts.Add(AccountP);
                    dbn.SaveChanges();
                }
                ModelState.Clear();
                ViewBag.Message = AccountP.FirstName + " " + AccountP.LastName + " seccessfully registered";
            }
            return View();
        }*/ 


        // GET: Account/Details/5
        public ActionResult Details(int? id)
        {
            if (Session["UserID"] != null)
            {
                if (id == null)
                {
                    return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
                }
                Post post = db.Posts.Find(id);
                if (post == null)
                {
                    return HttpNotFound();
                }
                return View(post);
            }
            else
            {
                return RedirectToAction("Index");
            }
        }



        // GET: Account/Create
        public ActionResult Create()
        {
            if (Session["UserID"] != null)
            {
                return View();
            }
            else
            {
                return RedirectToAction("Index");
            }
        }

        // POST: Account/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "PostID,Title,WrittenBy,Website,PublishedDate,Text,IsImage,Image,IsVideo,Video")] Post post)
        {
            if (Session["UserID"] != null)
            {
                if (ModelState.IsValid)
                {
                    db.Posts.Add(post);
                    db.SaveChanges();
                    return RedirectToAction("Index");
                }

                return View(post);
            }
            else
            {
                return RedirectToAction("Index");
            }
        }

        // GET: Account/Edit/5
        public ActionResult Edit(int? id)
        {
            if (Session["UserID"] != null)
            {
                if (id == null)
                {
                    return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
                }
                Post post = db.Posts.Find(id);
                if (post == null)
                {
                    return HttpNotFound();
                }
                return View(post);
            }
            else
            {
                return RedirectToAction("Index");
            }
        }

        // POST: Account/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "PostID,Title,WrittenBy,Website,PublishedDate,Text,IsImage,Image,IsVideo,Video")] Post post)
        {
            if (Session["UserID"] != null)
            {
                if (ModelState.IsValid)
                {
                    db.Entry(post).State = System.Data.Entity.EntityState.Modified;
                    db.SaveChanges();
                    return RedirectToAction("Index");
                }
                return View(post);
            }
            else
            {
                return RedirectToAction("Index");
            }
        }

        // GET: Account/Delete/5
        public ActionResult Delete(int? id)
        {
            if (Session["UserID"] != null)
            {
                if (id == null)
                {
                    return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
                }
                Post post = db.Posts.Find(id);
                if (post == null)
                {
                    return HttpNotFound();
                }
                return View(post);
            }
            else
            {
                return RedirectToAction("Index");
            }
        }

        // POST: Account/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            if (Session["UserID"] != null)
            {
                Post post = db.Posts.Find(id);
                db.Posts.Remove(post);
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            else
            {
                return RedirectToAction("Index");
            }
        }

        /*Comment Edit*/
        // GET: Comments/Edit/5
        public ActionResult EditComment(int? id)
        {
            if (Session["UserID"] != null)
            {
                if (id == null)
                {
                    return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
                }
                Post post = db.Posts.Find(id);
                if (post == null)
                {
                    return HttpNotFound();
                }
                return View(post);
            }
            else
            {
                return RedirectToAction("Index");
            }
        }

        // POST: Comments/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult EditComment([Bind(Include = "CommentID,RelatedPostID,Title,WrittenBy,Website,PublishDate,Text")] Comment comment)
        {
            if (Session["UserID"] != null)
            {
                if (ModelState.IsValid)
                {
                    db.Entry(comment).State = System.Data.Entity.EntityState.Modified;
                    db.SaveChanges();
                    return RedirectToAction("Index");
                }
                return View(comment);
            }
            else
            {
                return RedirectToAction("Index");
            }
        }


        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}